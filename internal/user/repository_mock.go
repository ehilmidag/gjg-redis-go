// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/repository.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	models "gjg-redis-go/internal/user/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// MySQLCreateUser mocks base method.
func (m *MockRepository) MySQLCreateUser(ctx context.Context, user *models.UserCreateEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MySQLCreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// MySQLCreateUser indicates an expected call of MySQLCreateUser.
func (mr *MockRepositoryMockRecorder) MySQLCreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MySQLCreateUser", reflect.TypeOf((*MockRepository)(nil).MySQLCreateUser), ctx, user)
}

// MySQLGetUserByID mocks base method.
func (m *MockRepository) MySQLGetUserByID(ctx context.Context, userid string) (*models.UserCreateEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MySQLGetUserByID", ctx, userid)
	ret0, _ := ret[0].(*models.UserCreateEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MySQLGetUserByID indicates an expected call of MySQLGetUserByID.
func (mr *MockRepositoryMockRecorder) MySQLGetUserByID(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MySQLGetUserByID", reflect.TypeOf((*MockRepository)(nil).MySQLGetUserByID), ctx, userid)
}

// MySQLUpdatePoint mocks base method.
func (m *MockRepository) MySQLUpdatePoint(ctx context.Context, update *models.SendScoreEntity) (*models.SendScoreDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MySQLUpdatePoint", ctx, update)
	ret0, _ := ret[0].(*models.SendScoreDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MySQLUpdatePoint indicates an expected call of MySQLUpdatePoint.
func (mr *MockRepositoryMockRecorder) MySQLUpdatePoint(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MySQLUpdatePoint", reflect.TypeOf((*MockRepository)(nil).MySQLUpdatePoint), ctx, update)
}

// RedisCreateUser mocks base method.
func (m *MockRepository) RedisCreateUser(ctx context.Context, userid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisCreateUser", ctx, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedisCreateUser indicates an expected call of RedisCreateUser.
func (mr *MockRepositoryMockRecorder) RedisCreateUser(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisCreateUser", reflect.TypeOf((*MockRepository)(nil).RedisCreateUser), ctx, userid)
}

// RedisCreateUserByCountry mocks base method.
func (m *MockRepository) RedisCreateUserByCountry(ctx context.Context, userid, countryCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisCreateUserByCountry", ctx, userid, countryCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedisCreateUserByCountry indicates an expected call of RedisCreateUserByCountry.
func (mr *MockRepositoryMockRecorder) RedisCreateUserByCountry(ctx, userid, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisCreateUserByCountry", reflect.TypeOf((*MockRepository)(nil).RedisCreateUserByCountry), ctx, userid, countryCode)
}

// RedisGetRankByID mocks base method.
func (m *MockRepository) RedisGetRankByID(ctx context.Context, userid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisGetRankByID", ctx, userid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedisGetRankByID indicates an expected call of RedisGetRankByID.
func (mr *MockRepositoryMockRecorder) RedisGetRankByID(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisGetRankByID", reflect.TypeOf((*MockRepository)(nil).RedisGetRankByID), ctx, userid)
}

// RedisLeaderBoard mocks base method.
func (m *MockRepository) RedisLeaderBoard(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisLeaderBoard", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedisLeaderBoard indicates an expected call of RedisLeaderBoard.
func (mr *MockRepositoryMockRecorder) RedisLeaderBoard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisLeaderBoard", reflect.TypeOf((*MockRepository)(nil).RedisLeaderBoard), ctx)
}

// RedisLeaderBoardByCountry mocks base method.
func (m *MockRepository) RedisLeaderBoardByCountry(ctx context.Context, country string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisLeaderBoardByCountry", ctx, country)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedisLeaderBoardByCountry indicates an expected call of RedisLeaderBoardByCountry.
func (mr *MockRepositoryMockRecorder) RedisLeaderBoardByCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisLeaderBoardByCountry", reflect.TypeOf((*MockRepository)(nil).RedisLeaderBoardByCountry), ctx, country)
}

// RedisScoreUpdate mocks base method.
func (m *MockRepository) RedisScoreUpdate(ctx context.Context, userid string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisScoreUpdate", ctx, userid, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedisScoreUpdate indicates an expected call of RedisScoreUpdate.
func (mr *MockRepositoryMockRecorder) RedisScoreUpdate(ctx, userid, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisScoreUpdate", reflect.TypeOf((*MockRepository)(nil).RedisScoreUpdate), ctx, userid, score)
}

// RedisScoreUpdateByCountry mocks base method.
func (m *MockRepository) RedisScoreUpdateByCountry(ctx context.Context, userid, countryCode string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisScoreUpdateByCountry", ctx, userid, countryCode, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedisScoreUpdateByCountry indicates an expected call of RedisScoreUpdateByCountry.
func (mr *MockRepositoryMockRecorder) RedisScoreUpdateByCountry(ctx, userid, countryCode, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisScoreUpdateByCountry", reflect.TypeOf((*MockRepository)(nil).RedisScoreUpdateByCountry), ctx, userid, countryCode, score)
}
