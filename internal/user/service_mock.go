// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/service.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	models "gjg-redis-go/internal/user/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, user *models.SignIn) (*models.UserResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.UserResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, user)
}

// GetLeaderBoard mocks base method.
func (m *MockService) GetLeaderBoard(ctx context.Context) (*[]models.LeaderBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderBoard", ctx)
	ret0, _ := ret[0].(*[]models.LeaderBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderBoard indicates an expected call of GetLeaderBoard.
func (mr *MockServiceMockRecorder) GetLeaderBoard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderBoard", reflect.TypeOf((*MockService)(nil).GetLeaderBoard), ctx)
}

// GetLeaderBoardByCountry mocks base method.
func (m *MockService) GetLeaderBoardByCountry(ctx context.Context, country string) (*[]models.LeaderBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderBoardByCountry", ctx, country)
	ret0, _ := ret[0].(*[]models.LeaderBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderBoardByCountry indicates an expected call of GetLeaderBoardByCountry.
func (mr *MockServiceMockRecorder) GetLeaderBoardByCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderBoardByCountry", reflect.TypeOf((*MockService)(nil).GetLeaderBoardByCountry), ctx, country)
}

// GetUserDetailsByID mocks base method.
func (m *MockService) GetUserDetailsByID(ctx context.Context, userid string) (*models.UserResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsByID", ctx, userid)
	ret0, _ := ret[0].(*models.UserResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailsByID indicates an expected call of GetUserDetailsByID.
func (mr *MockServiceMockRecorder) GetUserDetailsByID(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsByID", reflect.TypeOf((*MockService)(nil).GetUserDetailsByID), ctx, userid)
}

// UpdateScore mocks base method.
func (m *MockService) UpdateScore(ctx context.Context, scoreUpdate *models.SendScore) (*models.SendScoreDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", ctx, scoreUpdate)
	ret0, _ := ret[0].(*models.SendScoreDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockServiceMockRecorder) UpdateScore(ctx, scoreUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockService)(nil).UpdateScore), ctx, scoreUpdate)
}
